?songscraper
devtools::install("songscrape")
devtools::install("songscrape.R")
library(songscrape)
devtools::install("songscrape")
build('songscrap')
build('songscrape')
build('songscrape')
library(roxygen2)
list.files()
roxygenize("songscrape")
roxygenize("songscraper")
roxygenize("songscrapr")
library(songscraper)
devtools::install("songscrape")
devtools::install("songscraper")
library(songscraper)
?songscrape
library(songscraper)
library(songscraper)
?songscrape
?songscrape
library(songscraper)
?songscrape
library(songscraper)
?songscrape
library(songscraper)
?songscrape
library(songscraper)
?songscrape
library(songscraper)
SongsListScrapper("ironwine")
library(songscraper)
SongsListScrapper("ironwine")
library(songscraper)
SongsListScrapper("lordhuron")
library(songscraper)
SongsListScrapper("ironwine")
library(songscraper)
SongsListScrapper("ironwine")
library(songscraper)
SongsListScrapper("ironwine")
library(songscraper)
SongsListScrapper("ironwine")
?as.tibble
??as.tibble
library(songscraper)
SongsListScrapper("ironwine")
library(songscraper)
SongsListScrapper("ironwine")
library(songscraper)
SongsListScrapper("ironwine")
songscrape("ironwine")
library(songscraper)
SongsListScrapper("lordhuron")
songscrape("ironwine")
library(songscraper)
SongsListScrapper("harrystyles")
songscrape("ironwine")
library(songscraper)
songlist("harrystyles")
?function()
?function
listsongs <- songlist("lordhuron")
View(listsongs)
listsongs[1:20]
listsongs %>% slice(20:22)
library(dplyr)
listsongs %>% slice(20:22)
listsongs %>% top_n(10)
library(songscraper)
songscrape("ironwine")
songscrape("ironwine", 2, 4)
songscrape("ironwine", 4)
library(songscraper)
songlist("ironwine")
songscrape("ironewine", 4)
library(songscraper)
songscrape("ironwine", 4)
library(songscraper)
songlist("ironwine")
songscrape("ironwine", 4)
songscrape("ironwine", 4, 8)
library(songscraper)
songscrape("ironwine", 2,4)
library(songscraper)
songlist("ironwine")
songscrape("ironwine", 5)
songscrape("ironwine", to = 5)
library(songscraper)
songscrape("ironwine", to = 4)
songscrape("ironwine")
library(songscraper)
songscrape("ironwine", from = 4, to = 6)
library(songscraper)
songscrape("ironwine", from = 4, to = 6)
library(songscraper)
songscrape("ironwine", 5)
library(songscraper)
songscrape("ironwine", 4)
library(songscraper)
songscrape("ironwine", 4)
library(songscraper)
songscrape("lordhuron", 5)
library(songscraper)
songscrape("ironwine", 5)
z <- TRUE
z
library(songscraper)
songscrape("ironwine")
library(songscraper)
songscrape("ironwine")
songscrape("ironwine",5)
library(songscraper)
songscrape("ironwine",5)
songscrape("ironwine", 5, 8)
library(songscraper)
songlist("ironwine")
library(songscraper)
songlist("lordhuron")
library(songscraper)
songscrape("ironwine", 5)
songscrape("ironwine", 5, 10)
library(songscraper)
??songscraper
library(songscraper)
??songscraper
library(songscraper)
songscraper
??songscrape
?songscrape
?songlist
?songscrape
library(tidytext)
?unnest_tokens
?songscrape
library(songscraper)
?songscrape
library(songscraper)
?songscrape
R CMD build songscraper
library(rtools)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
R CMD build songscraper
#Function to Display Song List
songlist <- function(artistname) {
options('max.print' = 100000)
url <- paste0("https://www.azlyrics.com/", substring(artistname, 1, 1),"/",artistname, ".html")
page <- url
songs <- page %>%
xml2::read_html() %>%
rvest::html_nodes(xpath = "/html/body/div[2]/div/div[2]/div[4]/div/a") %>%
rvest::html_text() %>%
as.data.frame()
chart <- cbind(songs)
names(chart) <- c("Songs")
chart <- tibble::as_tibble(chart)
return(chart %>% print(n = Inf))
}
#Function to Scrape Lyrics
songscrape <- function(artistname, from, to) {
#If only name is Specified
if(missing(from) && missing(to)){
from = FALSE
}
#if only one number is given
if(missing(to)){
to = FALSE
}
if(from == FALSE){
url <- paste0("https://www.azlyrics.com/", substring(artistname, 1, 1),"/",artistname, ".html")
artist <- artistname
SongsListScrapper <- function(artistname) {
page <- artistname
songs <- page %>%
xml2::read_html() %>%
rvest::html_nodes(xpath = "/html/body/div[2]/div/div[2]/div[4]/div/a") %>%
rvest::html_text() %>%
as.data.frame()
chart <- cbind(songs)
names(chart) <- c("Songs")
chart <- tibble::as_tibble(chart)
return(chart)
}
SongsList <- purrr::map_df(url, SongsListScrapper)
SongsList
SongsList %<>%
dplyr::mutate(
Songs = as.character(Songs)
,Songs = gsub("[[:punct:]]", "", Songs)
,Songs = tolower(Songs)
,Songs = gsub(" ", "", Songs)
)
SongsList$Songs
#Scrape Lyrics
wipe_html <- function(str_html) {
gsub("<.*?>", "", str_html)
}
lyrics <- c()
album <- c()
name <- c()
year <- c()
number <- 1
for(i in seq_along(SongsList$Songs)) {
for_url_name <- SongsList$Songs[i]
#clean name
for_url_name <- tolower(gsub("[[:punct:]]\\s", "", for_url_name))
#create url
paste_url <- paste0("https://www.azlyrics.com/lyrics/", artist,"/", for_url_name, ".html")
tryCatch( {
#open connection to url
for_html_code <- xml2::read_html(paste_url)
for_lyrics <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/div[5]")
for_album <- rvest::html_node(for_html_code, xpath = "//div[@class='songinalbum_title']/b")
for_song_names <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/b")
for_song_year <- rvest::html_node(for_html_code, xpath = "//div[@class='songinalbum_title']")
}, error = function(e){NA})
for_lyrics <- wipe_html(for_lyrics)
for_album <- wipe_html(for_album)
for_song_names <- wipe_html(for_song_names)
for_song_year <- wipe_html(for_song_year)
for_song_year <-  gsub("[^0-9.]", "",  for_song_year)
lyrics[number] <- for_lyrics
album[number] <- for_album
name[number] <- for_song_names
year[number] <- for_song_year
number <- number +1
show(paste0(for_url_name, " Scrape Complete!", "[",i,"/",nrow(SongsList),"]"))
Sys.sleep(10)
}
songs <- cbind(lyrics, album, name, year) %>% as.data.frame()
songs$album <-  gsub("[[:punct:]]", "", songs$album)
songs$name <- gsub('"', "", songs$name)
return(songs)
} else if(to == FALSE){
url <- paste0("https://www.azlyrics.com/", substring(artistname, 1, 1),"/",artistname, ".html")
artist <- artistname
SongsListScrapper <- function(artistname) {
page <- artistname
songs <- page %>%
xml2::read_html() %>%
rvest::html_nodes(xpath = "/html/body/div[2]/div/div[2]/div[4]/div/a") %>%
rvest::html_text() %>%
as.data.frame()
chart <- cbind(songs)
names(chart) <- c("Songs")
chart <- tibble::as_tibble(chart)
return(chart)
}
SongsList <- purrr::map_df(url, SongsListScrapper)
SongsList
SongsList %<>%
dplyr::mutate(
Songs = as.character(Songs)
,Songs = gsub("[[:punct:]]", "", Songs)
,Songs = tolower(Songs)
,Songs = gsub(" ", "", Songs)
)
SongsList$Songs
#Scrape Lyrics
wipe_html <- function(str_html) {
gsub("<.*?>", "", str_html)
}
lyrics <- c()
album <- c()
name <- c()
year <- c()
number <- 1
SongsList <- SongsList %>% slice(1:from)
for(i in seq_along(SongsList$Songs)) {
for_url_name <- SongsList$Songs[i]
#clean name
for_url_name <- tolower(gsub("[[:punct:]]\\s", "", for_url_name))
#create url
paste_url <- paste0("https://www.azlyrics.com/lyrics/", artist,"/", for_url_name, ".html")
tryCatch( {
#open connection to url
for_html_code <- xml2::read_html(paste_url)
for_lyrics <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/div[5]")
for_album <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/div[11]/div[1]/b")
for_song_names <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/b")
for_song_year <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/div[11]/div[1]")
}, error = function(e){NA})
for_lyrics <- wipe_html(for_lyrics)
for_album <- wipe_html(for_album)
for_song_names <- wipe_html(for_song_names)
for_song_year <- wipe_html(for_song_year)
for_song_year <-  gsub("[^0-9.]", "",  for_song_year)
lyrics[number] <- for_lyrics
album[number] <- for_album
name[number] <- for_song_names
year[number] <- for_song_year
number <- number +1
show(paste0(for_url_name, " Scrape Complete!", "[",i,"/",nrow(SongsList),"]"))
Sys.sleep(10)
}
songs <- cbind(lyrics, album, name, year) %>% as.data.frame()
songs$album <-  gsub("[[:punct:]]", "", songs$album)
songs$name <- gsub('"', "", songs$name)
return(songs)
} else {
url <- paste0("https://www.azlyrics.com/", substring(artistname, 1, 1),"/",artistname, ".html")
artist <- artistname
SongsListScrapper <- function(artistname) {
page <- artistname
songs <- page %>%
xml2::read_html() %>%
rvest::html_nodes(xpath = "/html/body/div[2]/div/div[2]/div[4]/div/a") %>%
rvest::html_text() %>%
as.data.frame()
chart <- cbind(songs)
names(chart) <- c("Songs")
chart <- tibble::as_tibble(chart)
return(chart)
}
SongsList <- purrr::map_df(url, SongsListScrapper)
SongsList
SongsList %<>%
dplyr::mutate(
Songs = as.character(Songs)
,Songs = gsub("[[:punct:]]", "", Songs)
,Songs = tolower(Songs)
,Songs = gsub(" ", "", Songs)
)
SongsList$Songs
#Scrape Lyrics
wipe_html <- function(str_html) {
gsub("<.*?>", "", str_html)
}
lyrics <- c()
album <- c()
name <- c()
year <- c()
number <- 1
SongsList <- SongsList %>% slice(from:to)
for(i in seq_along(SongsList$Songs)) {
for_url_name <- SongsList$Songs[i]
#clean name
for_url_name <- tolower(gsub("[[:punct:]]\\s", "", for_url_name))
#create url
paste_url <- paste0("https://www.azlyrics.com/lyrics/", artist,"/", for_url_name, ".html")
tryCatch( {
#open connection to url
for_html_code <- xml2::read_html(paste_url)
for_lyrics <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/div[5]")
for_album <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/div[11]/div[1]/b")
for_song_names <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/b")
for_song_year <- rvest::html_node(for_html_code, xpath = "/html/body/div[2]/div/div[2]/div[11]/div[1]")
}, error = function(e){NA})
for_lyrics <- wipe_html(for_lyrics)
for_album <- wipe_html(for_album)
for_song_names <- wipe_html(for_song_names)
for_song_year <- wipe_html(for_song_year)
for_song_year <-  gsub("[^0-9.]", "",  for_song_year)
lyrics[number] <- for_lyrics
album[number] <- for_album
name[number] <- for_song_names
year[number] <- for_song_year
number <- number +1
show(paste0(for_url_name, " Scrape Complete!", "[",i,"/",nrow(SongsList),"]"))
Sys.sleep(10)
}
songs <- cbind(lyrics, album, name, year) %>% as.data.frame()
songs$album <-  gsub("[[:punct:]]", "", songs$album)
songs$name <- gsub('"', "", songs$name)
return(songs)
}
}
songlist("sleepingatlast")
library(songscraper)
songlist("sleepingatlast")
library(songscraper)
songlist("shawnmendes")
songscrape("shawnmendes", 1,1)
library(songscraper)
songscrape("shawnmendes", 1,1)
library(songscraper)
songscraper("shawnmendes", 1,1)
library(songscraper)
?songscraper
songlist("shawnmendes")
songscraper("shawnmendes", 1,1)
R CMD check --as-cran
library(devtools)
check("songscraper")
check()
library(songscraper)
?songlist
library(songscraper)
?songlist
library(songscraper)
?songlist
library(songscraper)
?songlist
remove.packages("songscraper", lib="~/R/win-library/4.0")
library(devtools)
install_github("thedivtagguy/songscraper")
library(songscraper)
?songscraper
songlist("oasis")
oa <- songscraper("oasis", 122, 122)
oa
songlist("nancigriffith")
songscraper("nancigriffith", 29, 29)
songlist('onedirection')
songlist("onedirection")
songscraper("onedirection", 110,110)
